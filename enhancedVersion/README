#Assignment 9

##Updates

- In main: add three more cases in the switch to support new feature in valid command-line.
- In AnimationReader: add "slo-mo" case to respond to the slo-mo file while doing parse file:
  -- to support "slo-mo" case, a new method readSloMo(Scanner s, AnimationBuilder<Doc> builder) is created.
- In Builder class: addSloMo(int startTick, int endTick) is added to record when to start a slo-mo.
- Controller:
  Add three new controller class:
  -- DiscreteController extends InteractiveController
  -- SloMoController extends InteractiveController 
- Valid SloMo file example:
  'slo-mo 10 15' start with 'slo-mo' following with start and end tick.
  supports several slo-mo intervals like how to have many motions in the file.
- Model:
  -- Feature 2 discrete:
     -- add local variables List<Integers> loKeys: represents all the key frame tick of the animation. (No duplicate, sort in the ascending order)
     -- add two methods:
        -- addKeys(int t1, int t2) add the key frames to loKeys.
	-- getKeys() get the key frames as a list of loKeys.
 
  -- Feature 3 slo-mo:
     -- add local variable Map<String, List<Integers>> sloMoIntervals : repressed all the slomo intervals recorded in the file.
     -- add two methods:
        -- addSloMo(int t1, int t2) add the start and end tick of slams to the map
	-- getSloMo() get the record of the slo-mo intervals

###Feature 1 - A New Shape & Outline Mode
New Classes
- `AnimationEnhancedSVGView` supports all kinds of shape tags by delegating the tag-creating process to specific shape classes using factory method.
- `AnimationOutlineView` extends the interactive view and enables the fill/outline button and related functions.
- `OutlineController` supports a new feature of choosing between outline/fill mode by extending the original interactive controller class and enabling a new button in the new controller.
- `Plus` is a new shape class just like rectangle and ellipse.
- `DrawablePlus` is a new drawable shape class just like other drawable shapes containing detailed info of a shape's state.

Design
- use a stable polygon instead of two rectangles or multiple lines to represent a plus sign, so we are able to control and alter the plus sign as a complete shape instead of multiple shapes or lines.
- extend interactive view classes and add new features to it
- extend abstract shape classes and implements related methods for the plus sign
- a button to switch between fill/outline mode, just like switching between enable/disable loop

###Feature 2 - Discrete
DiscreteView extends ControllableVisualView 
- Design: add one more button (Discrete/Continuous) to support switch between the discrete and continuous mood. We set tempo as 5, it decreases by 1 when the actionPerformed is called. When the tempo equals to 0, the tick moved to next tick of key frames.

###Feature 3 - Slo-Mo
SloMoView extends AnimationVisualView
- Design: support four speed of SloMo: 0.10x, 0.25x, 0.50x, and 0.75x.
          Add four buttons corresponds to that four speeds.
          Only in the slo-mo interval the button is valid to change the speed
	  A speed text panel will display the current speed and at the beginning it will display:
	  'Original Speed: 20'
          While pressing the button in the SloMo intervals, the speedText panel will show the current slo-mo speed
	  'slo-mo: 10 (0.50x)'
          In the slo-mo interval user can change the slomo speed freely. When the slo-mo interval passed, the speed will back to the original speed given by command-line, and the speedText panel will display. 'Original Speed: 20'.
  -- add four more methods corresponds to the four buttons and will be called in the sloMo controller to add actionListener.


#Assignment 7
Tongfei (Felicia) Guo, Tongxin (Elo) Li

##Step1:

##Updates

###Split the main and controller
- In our main, it basically does two jobs: 
 -- <1> Read the input file then build the model and view. 
 -- <2> Create a corresponding controller class according to different '-view' type (and pass in the modified model and view into that specific Controller), finally invoking the controller for rendering the animation. 

###Create an Interface of controller 
- Design different controller class corresponds to different view types (e.g. textual, svg, graphic and interactive animation etc.)
- Notes: InteractiveController is not an independent class but extends the visualViewController since they based on same functionality. The InteractiveController eliminates any mention of Swing-specific events, and generalized it further so that the controller did not need to depend on the Swing library at all. It create, accept and add each actionListener calling individual method in the view class.

###Each type of view is an individual view interface.
- The view interface has one-to-one relationship of the controller class.
- Notes: the interactiveView class (ControllableVisualView) extends the animationVisualView and use the same JPanel class as animationVisualView.
 -- it override the setUp() method and actionListener method() in animationVisualView to fulfill the requirements of new interactions from user.

###Tips for interaction view
- when the Panel is as large as our screen, the Controller button panel cannot be fully expanded which makes the button not clickable. In order to play with the button, please make sure you drag this animation window to a large screens and fully expand the control button panel. Thanks.



##Class

####Controller Package
- interface `Controller`
- class `TextualController` implements `Controller`
- class `SVGController` implements `Controller`
- class `VisualController` implements `Controller`
  - class `InteractiveController` extends `VisualController`

####View Package
- interface `ITextualView`
- class `AnimationTextualView` implements `ITextualView`
- interface `ISVGView`
- class `AnimationSVGView` implements `ISVGView `
- interface `IVisualView`
- class `AnimationVisualView` implements `IVisualView`
  - class `ControllableVisualView` extends `AnimationVisualView`
- common field : model, speed
- common method: render(Appendable out) throws IOException;


##Step2:

##Create Animation
####Programmatically-Created
Mergesort Visualization
- visualize the mergesort algorithm
- support comparison (when two bars blink) and order (when bars change position)
- to sort a new array of integers, let the creator take in that array and run the main method as an entry to the program
####Manually-Created
Traffic Visualization
- visualize the traffic on a road and cars' responses to the traffic light
